Estrategia

Para poder resolver este reto que fue algo complejo, pero apliqué lo que aprendí en las unidades anteriores por ejemplo el uso de colas, el problema que me toco fue sobre un boleto de autobús donde tenía que crear las clases, persona, viaje, autobús, terminal y el boleto por su puesto, para poder crear los objetos tuve que hacer uso de colas para guardar los objetos que se creaban con los datos de los txt, pero para crear los boletos tenía que agregar en el constructor de boleto atributos como el id_usuario, la clave_viaje y la clase que estaban en otros txt, pero ya había guardado en una cola objetos con los valores que necesitaba, pero tuve que hacer uso de un arreglo para que fuera más fácil al momento de pasarlo en el constructor de boleto se puede entender que era mejor el uso de arreglos, pero su desventaja es que tenemos que definir el tamaño del arreglo desde un principio y no se van a poder agregar más datos si es que queremos que sean más de 30, el txt de boletos que está en la carpeta de nuestro proyecto  contiene los 6 atributos que se requieren para crear un boleto, pero se usan los mismos datos si no los datos de los objetos persona viaje, y autobús bueno un atributo de ellos. También se tuvo que modificar tanto la clase AVLTree como la clase AVLNode para que guardara en el árbol la llave del objeto con la que se va hacer la búsqueda y un objeto del tipo boleto en este caso, en las impresiones del árbol las indicaciones era que tenía que imprimir la llave y una pequeña descripción, en esta parte tuve que usar un arreglo que contenia objetos de tipo persona esto para comparar el id_ persona con el id_persona del boleto y asi encontrar el nombre de la persona en el boleto esto porque el constructor de boleto no contiene como argumento el nombre de quien lo compro y para esto se hizo la comparación con un for como dije y la comparación de los ID, y asi podemos imprimir quien compro el boleto. 
Al final en la clase paseo encontramos un método main para imprimir todas las formas de impresión que contiene el árbol, y en la clase cliente imprimimos el nombre y el número, haciendo algunas búsquedas con el método buscar que implemente en el proyecto, para las búsquedas cree un método que crea un arreglo con 10 números que no se repiten, pero no están ordenados asi que cada vez que se ejecute se va hacer la búsqueda de boletos de forma aleatoria.
