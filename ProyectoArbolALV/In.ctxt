#BlueJ class context
comment0.target=In
comment0.text=\r\n\ \ <i>Input</i>.\ This\ class\ provides\ methods\ for\ reading\ strings\r\n\ \ and\ numbers\ from\ standard\ input,\ file\ input,\ URLs,\ and\ sockets.\ \r\n\ \ <p>\r\n\ \ The\ Locale\ used\ is\:\ language\ \=\ English,\ country\ \=\ US.\ This\ is\ consistent\r\n\ \ with\ the\ formatting\ conventions\ with\ Java\ floating-point\ literals,\r\n\ \ command-line\ arguments\ (via\ {@link\ Double\#parseDouble(String)})\r\n\ \ and\ standard\ output.\ \r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ \r\n\ \ <a\ href\="https\://introcs.cs.princeton.edu/31datatype">Section\ 3.1</a>\ of\r\n\ \ <i>Computer\ Science\:\ An\ Interdisciplinary\ Approach</i>\ \r\n\ \ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\ \ <p>\r\n\ \ Like\ {@link\ Scanner},\ reading\ a\ token\ also\ consumes\ preceding\ Java\r\n\ \ whitespace,\ reading\ a\ full\ line\ consumes\r\n\ \ the\ following\ end-of-line\ delimeter,\ while\ reading\ a\ character\ consumes\r\n\ \ nothing\ extra.\ \r\n\ \ <p>\r\n\ \ Whitespace\ is\ defined\ in\ {@link\ Character\#isWhitespace(char)}.\ Newlines\r\n\ \ consist\ of\ \\n,\ \\r,\ \\r\\n,\ and\ Unicode\ hex\ code\ points\ 0x2028,\ 0x2029,\ 0x0085;\r\n\ \ see\ <a\ href\="http\://www.docjar.com/html/api/java/util/Scanner.java.html">\r\n\ \ Scanner.java</a>\ (NB\:\ Java\ 6u23\ and\ earlier\ uses\ only\ \\r,\ \\r,\ \\r\\n).\r\n\r\n\ \ @author\ David\ Pritchard\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=In()
comment1.text=\r\n\ Initializes\ an\ input\ stream\ from\ standard\ input.\r\n
comment10.params=
comment10.target=boolean\ hasNextChar()
comment10.text=\r\n\ Returns\ true\ if\ this\ input\ stream\ has\ more\ input\ (including\ whitespace).\r\n\ Use\ this\ method\ to\ know\ whether\ the\ next\ call\ to\ {@link\ \#readChar()}\ will\ succeed.\r\n\ This\ method\ is\ functionally\ equivalent\ to\ {@link\ \#hasNextLine()}.\r\n\ \r\n\ @return\ {@code\ true}\ if\ this\ input\ stream\ has\ more\ input\ (including\ whitespace);\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\ \ \ \r\n
comment11.params=
comment11.target=java.lang.String\ readLine()
comment11.text=\r\n\ Reads\ and\ returns\ the\ next\ line\ in\ this\ input\ stream.\r\n\r\n\ @return\ the\ next\ line\ in\ this\ input\ stream;\ {@code\ null}\ if\ no\ such\ line\r\n
comment12.params=
comment12.target=char\ readChar()
comment12.text=\r\n\ Reads\ and\ returns\ the\ next\ character\ in\ this\ input\ stream.\r\n\r\n\ @return\ the\ next\ {@code\ char}\ in\ this\ input\ stream\r\n\ @throws\ NoSuchElementException\ if\ the\ input\ stream\ is\ empty\r\n
comment13.params=
comment13.target=java.lang.String\ readAll()
comment13.text=\r\n\ Reads\ and\ returns\ the\ remainder\ of\ this\ input\ stream,\ as\ a\ string.\r\n\r\n\ @return\ the\ remainder\ of\ this\ input\ stream,\ as\ a\ string\r\n
comment14.params=
comment14.target=java.lang.String\ readString()
comment14.text=\r\n\ Reads\ the\ next\ token\ from\ this\ input\ stream\ and\ returns\ it\ as\ a\ {@code\ String}.\r\n\r\n\ @return\ the\ next\ {@code\ String}\ in\ this\ input\ stream\r\n\ @throws\ NoSuchElementException\ if\ the\ input\ stream\ is\ empty\r\n
comment15.params=
comment15.target=int\ readInt()
comment15.text=\r\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ {@code\ int},\r\n\ and\ returns\ the\ {@code\ int}.\r\n\r\n\ @return\ the\ next\ {@code\ int}\ in\ this\ input\ stream\r\n\ @throws\ NoSuchElementException\ if\ the\ input\ stream\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ an\ {@code\ int}\r\n
comment16.params=
comment16.target=double\ readDouble()
comment16.text=\r\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ {@code\ double},\r\n\ and\ returns\ the\ {@code\ double}.\r\n\r\n\ @return\ the\ next\ {@code\ double}\ in\ this\ input\ stream\r\n\ @throws\ NoSuchElementException\ if\ the\ input\ stream\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ double}\r\n
comment17.params=
comment17.target=float\ readFloat()
comment17.text=\r\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ {@code\ float},\r\n\ and\ returns\ the\ {@code\ float}.\r\n\r\n\ @return\ the\ next\ {@code\ float}\ in\ this\ input\ stream\r\n\ @throws\ NoSuchElementException\ if\ the\ input\ stream\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ float}\r\n
comment18.params=
comment18.target=long\ readLong()
comment18.text=\r\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ {@code\ long},\r\n\ and\ returns\ the\ {@code\ long}.\r\n\r\n\ @return\ the\ next\ {@code\ long}\ in\ this\ input\ stream\r\n\ @throws\ NoSuchElementException\ if\ the\ input\ stream\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ long}\r\n
comment19.params=
comment19.target=short\ readShort()
comment19.text=\r\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ {@code\ short},\r\n\ and\ returns\ the\ {@code\ short}.\r\n\r\n\ @return\ the\ next\ {@code\ short}\ in\ this\ input\ stream\r\n\ @throws\ NoSuchElementException\ if\ the\ input\ stream\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ short}\r\n
comment2.params=socket
comment2.target=In(java.net.Socket)
comment2.text=\r\n\ Initializes\ an\ input\ stream\ from\ a\ socket.\r\n\r\n\ @param\ \ socket\ the\ socket\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ open\ {@code\ socket}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ socket}\ is\ {@code\ null}\r\n
comment20.params=
comment20.target=byte\ readByte()
comment20.text=\r\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ {@code\ byte},\r\n\ and\ returns\ the\ {@code\ byte}.\r\n\ <p>\r\n\ To\ read\ binary\ data,\ use\ {@link\ BinaryIn}.\r\n\r\n\ @return\ the\ next\ {@code\ byte}\ in\ this\ input\ stream\r\n\ @throws\ NoSuchElementException\ if\ the\ input\ stream\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ byte}\r\n
comment21.params=
comment21.target=boolean\ readBoolean()
comment21.text=\r\n\ Reads\ the\ next\ token\ from\ this\ input\ stream,\ parses\ it\ as\ a\ {@code\ boolean}\r\n\ (interpreting\ either\ {@code\ "true"}\ or\ {@code\ "1"}\ as\ {@code\ true},\r\n\ and\ either\ {@code\ "false"}\ or\ {@code\ "0"}\ as\ {@code\ false}).\r\n\r\n\ @return\ the\ next\ {@code\ boolean}\ in\ this\ input\ stream\r\n\ @throws\ NoSuchElementException\ if\ the\ input\ stream\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ {@code\ boolean}\r\n
comment22.params=
comment22.target=java.lang.String[]\ readAllStrings()
comment22.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ this\ input\ stream\ and\ returns\ them\ as\r\n\ an\ array\ of\ strings.\r\n\r\n\ @return\ all\ remaining\ tokens\ in\ this\ input\ stream,\ as\ an\ array\ of\ strings\r\n
comment23.params=
comment23.target=java.lang.String[]\ readAllLines()
comment23.text=\r\n\ Reads\ all\ remaining\ lines\ from\ this\ input\ stream\ and\ returns\ them\ as\r\n\ an\ array\ of\ strings.\r\n\r\n\ @return\ all\ remaining\ lines\ in\ this\ input\ stream,\ as\ an\ array\ of\ strings\r\n
comment24.params=
comment24.target=int[]\ readAllInts()
comment24.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ this\ input\ stream,\ parses\ them\ as\ integers,\r\n\ and\ returns\ them\ as\ an\ array\ of\ integers.\r\n\r\n\ @return\ all\ remaining\ lines\ in\ this\ input\ stream,\ as\ an\ array\ of\ integers\r\n
comment25.params=
comment25.target=long[]\ readAllLongs()
comment25.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ this\ input\ stream,\ parses\ them\ as\ longs,\r\n\ and\ returns\ them\ as\ an\ array\ of\ longs.\r\n\r\n\ @return\ all\ remaining\ lines\ in\ this\ input\ stream,\ as\ an\ array\ of\ longs\r\n
comment26.params=
comment26.target=double[]\ readAllDoubles()
comment26.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ this\ input\ stream,\ parses\ them\ as\ doubles,\r\n\ and\ returns\ them\ as\ an\ array\ of\ doubles.\r\n\r\n\ @return\ all\ remaining\ lines\ in\ this\ input\ stream,\ as\ an\ array\ of\ doubles\r\n
comment27.params=
comment27.target=void\ close()
comment27.text=\r\n\ Closes\ this\ input\ stream.\r\n
comment28.params=filename
comment28.target=int[]\ readInts(java.lang.String)
comment28.text=\r\n\ Reads\ all\ integers\ from\ a\ file\ and\ returns\ them\ as\r\n\ an\ array\ of\ integers.\r\n\r\n\ @param\ \ \ \ \ \ filename\ the\ name\ of\ the\ file\r\n\ @return\ \ \ \ \ the\ integers\ in\ the\ file\r\n\ @deprecated\ Replaced\ by\ {@code\ new\ In(filename)}.{@link\ \#readAllInts()}.\r\n
comment29.params=filename
comment29.target=double[]\ readDoubles(java.lang.String)
comment29.text=\r\n\ Reads\ all\ doubles\ from\ a\ file\ and\ returns\ them\ as\r\n\ an\ array\ of\ doubles.\r\n\r\n\ @param\ \ \ \ \ \ filename\ the\ name\ of\ the\ file\r\n\ @return\ \ \ \ \ the\ doubles\ in\ the\ file\r\n\ @deprecated\ Replaced\ by\ {@code\ new\ In(filename)}.{@link\ \#readAllDoubles()}.\r\n
comment3.params=url
comment3.target=In(java.net.URL)
comment3.text=\r\n\ Initializes\ an\ input\ stream\ from\ a\ URL.\r\n\r\n\ @param\ \ url\ the\ URL\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ open\ {@code\ url}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ url}\ is\ {@code\ null}\r\n
comment30.params=filename
comment30.target=java.lang.String[]\ readStrings(java.lang.String)
comment30.text=\r\n\ Reads\ all\ strings\ from\ a\ file\ and\ returns\ them\ as\r\n\ an\ array\ of\ strings.\r\n\r\n\ @param\ \ \ \ \ \ filename\ the\ name\ of\ the\ file\r\n\ @return\ \ \ \ \ the\ strings\ in\ the\ file\r\n\ @deprecated\ Replaced\ by\ {@code\ new\ In(filename)}.{@link\ \#readAllStrings()}.\r\n
comment31.params=
comment31.target=int[]\ readInts()
comment31.text=\r\n\ Reads\ all\ integers\ from\ standard\ input\ and\ returns\ them\r\n\ an\ array\ of\ integers.\r\n\r\n\ @return\ \ \ \ \ the\ integers\ on\ standard\ input\r\n\ @deprecated\ Replaced\ by\ {@link\ StdIn\#readAllInts()}.\r\n
comment32.params=
comment32.target=double[]\ readDoubles()
comment32.text=\r\n\ Reads\ all\ doubles\ from\ standard\ input\ and\ returns\ them\ as\r\n\ an\ array\ of\ doubles.\r\n\r\n\ @return\ \ \ \ \ the\ doubles\ on\ standard\ input\r\n\ @deprecated\ Replaced\ by\ {@link\ StdIn\#readAllDoubles()}.\r\n
comment33.params=
comment33.target=java.lang.String[]\ readStrings()
comment33.text=\r\n\ Reads\ all\ strings\ from\ standard\ input\ and\ returns\ them\ as\r\n\ \ an\ array\ of\ strings.\r\n\r\n\ @return\ \ \ \ \ the\ strings\ on\ standard\ input\r\n\ @deprecated\ Replaced\ by\ {@link\ StdIn\#readAllStrings()}.\r\n
comment34.params=args
comment34.target=void\ main(java.lang.String[])
comment34.text=\r\n\ Unit\ tests\ the\ {@code\ In}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment4.params=file
comment4.target=In(java.io.File)
comment4.text=\r\n\ Initializes\ an\ input\ stream\ from\ a\ file.\r\n\r\n\ @param\ \ file\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ open\ {@code\ file}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ file}\ is\ {@code\ null}\r\n
comment5.params=name
comment5.target=In(java.lang.String)
comment5.text=\r\n\ Initializes\ an\ input\ stream\ from\ a\ filename\ or\ web\ page\ name.\r\n\r\n\ @param\ \ name\ the\ filename\ or\ web\ page\ name\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ open\ {@code\ name}\ as\r\n\ \ \ \ \ \ \ \ \ a\ file\ or\ URL\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ name}\ is\ {@code\ null}\r\n
comment6.params=scanner
comment6.target=In(java.util.Scanner)
comment6.text=\r\n\ Initializes\ an\ input\ stream\ from\ a\ given\ {@link\ Scanner}\ source;\ use\ with\ \r\n\ {@code\ new\ Scanner(String)}\ to\ read\ from\ a\ string.\r\n\ <p>\r\n\ Note\ that\ this\ does\ not\ create\ a\ defensive\ copy,\ so\ the\r\n\ scanner\ will\ be\ mutated\ as\ you\ read\ on.\ \r\n\r\n\ @param\ \ scanner\ the\ scanner\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ scanner}\ is\ {@code\ null}\r\n
comment7.params=
comment7.target=boolean\ exists()
comment7.text=\r\n\ Returns\ true\ if\ this\ input\ stream\ exists.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ input\ stream\ exists;\ {@code\ false}\ otherwise\r\n
comment8.params=
comment8.target=boolean\ isEmpty()
comment8.text=\r\n\ Returns\ true\ if\ input\ stream\ is\ empty\ (except\ possibly\ whitespace).\r\n\ Use\ this\ to\ know\ whether\ the\ next\ call\ to\ {@link\ \#readString()},\ \r\n\ {@link\ \#readDouble()},\ etc\ will\ succeed.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ input\ stream\ is\ empty\ (except\ possibly\ whitespace);\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment9.params=
comment9.target=boolean\ hasNextLine()
comment9.text=\ \r\n\ Returns\ true\ if\ this\ input\ stream\ has\ a\ next\ line.\r\n\ Use\ this\ method\ to\ know\ whether\ the\r\n\ next\ call\ to\ {@link\ \#readLine()}\ will\ succeed.\r\n\ This\ method\ is\ functionally\ equivalent\ to\ {@link\ \#hasNextChar()}.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ input\ stream\ has\ more\ input\ (including\ whitespace);\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
numComments=35
